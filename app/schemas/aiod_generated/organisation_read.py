# coding: utf-8

from __future__ import annotations

import re  # noqa: F401
from datetime import date, datetime  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401


class OrganisationRead(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    OrganisationRead - a model defined in OpenAPI

        platform: The platform of this OrganisationRead [Optional].
        platform_identifier: The platform_identifier of this OrganisationRead [Optional].
        type: The type of this OrganisationRead.
        connection_to_ai: The connection_to_ai of this OrganisationRead [Optional].
        logo_url: The logo_url of this OrganisationRead [Optional].
        same_as: The same_as of this OrganisationRead [Optional].
        founding_date: The founding_date of this OrganisationRead [Optional].
        dissolution_date: The dissolution_date of this OrganisationRead [Optional].
        legal_name: The legal_name of this OrganisationRead [Optional].
        alternate_name: The alternate_name of this OrganisationRead [Optional].
        address: The address of this OrganisationRead [Optional].
        telephone: The telephone of this OrganisationRead [Optional].
        business_categories: The business_categories of this OrganisationRead.
        technical_categories: The technical_categories of this OrganisationRead.
        emails: The emails of this OrganisationRead.
        members: The members of this OrganisationRead.
        departments: The departments of this OrganisationRead.
        parent_organisation: The parent_organisation of this OrganisationRead [Optional].
        identifier: The identifier of this OrganisationRead.
    """

    platform: Optional[str] = Field(alias="platform", default=None)
    platform_identifier: Optional[str] = Field(
        alias="platform_identifier", default=None
    )
    type: str = Field(alias="type")
    connection_to_ai: Optional[str] = Field(alias="connection_to_ai", default=None)
    logo_url: Optional[str] = Field(alias="logo_url", default=None)
    same_as: Optional[str] = Field(alias="same_as", default=None)
    founding_date: Optional[datetime] = Field(alias="founding_date", default=None)
    dissolution_date: Optional[datetime] = Field(alias="dissolution_date", default=None)
    legal_name: Optional[str] = Field(alias="legal_name", default=None)
    alternate_name: Optional[str] = Field(alias="alternate_name", default=None)
    address: Optional[str] = Field(alias="address", default=None)
    telephone: Optional[str] = Field(alias="telephone", default=None)
    business_categories: List[str] = Field(alias="business_categories")
    technical_categories: List[str] = Field(alias="technical_categories")
    emails: List[str] = Field(alias="emails")
    members: List[int] = Field(alias="members")
    departments: List[int] = Field(alias="departments")
    parent_organisation: Optional[int] = Field(
        alias="parent_organisation", default=None
    )
    identifier: int = Field(alias="identifier")

    @validator("type")
    def type_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("connection_to_ai")
    def connection_to_ai_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("logo_url")
    def logo_url_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("same_as")
    def same_as_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("legal_name")
    def legal_name_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("alternate_name")
    def alternate_name_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("address")
    def address_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("telephone")
    def telephone_max_length(cls, value):
        assert len(value) <= 500
        return value


OrganisationRead.update_forward_refs()
