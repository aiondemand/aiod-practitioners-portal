# coding: utf-8

from __future__ import annotations

import re  # noqa: F401
from datetime import date, datetime  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401


class Address(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    Address - a model defined in OpenAPI

        region: The region of this Address [Optional].
        locality: The locality of this Address [Optional].
        street: The street of this Address [Optional].
        postal_code: The postal_code of this Address [Optional].
        address: The address of this Address [Optional].
        country: The country of this Address [Optional].
    """

    region: Optional[str] = Field(alias="region", default=None)
    locality: Optional[str] = Field(alias="locality", default=None)
    street: Optional[str] = Field(alias="street", default=None)
    postal_code: Optional[str] = Field(alias="postal_code", default=None)
    address: Optional[str] = Field(alias="address", default=None)
    country: Optional[str] = Field(alias="country", default=None)

    @validator("region")
    def region_max_length(cls, value):
        assert len(value) <= 256
        return value

    @validator("locality")
    def locality_max_length(cls, value):
        assert len(value) <= 256
        return value

    @validator("street")
    def street_max_length(cls, value):
        assert len(value) <= 256
        return value

    @validator("postal_code")
    def postal_code_max_length(cls, value):
        assert len(value) <= 64
        return value

    @validator("address")
    def address_max_length(cls, value):
        assert len(value) <= 256
        return value

    @validator("country")
    def country_min_length(cls, value):
        assert len(value) >= 3
        return value

    @validator("country")
    def country_max_length(cls, value):
        assert len(value) <= 3
        return value


Address.update_forward_refs()
