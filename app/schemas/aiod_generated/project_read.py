# coding: utf-8

from __future__ import annotations

import re  # noqa: F401
from datetime import date, datetime  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401


class ProjectRead(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    ProjectRead - a model defined in OpenAPI

        platform: The platform of this ProjectRead [Optional].
        platform_identifier: The platform_identifier of this ProjectRead [Optional].
        name: The name of this ProjectRead.
        doi: The doi of this ProjectRead [Optional].
        start_date: The start_date of this ProjectRead [Optional].
        end_date: The end_date of this ProjectRead [Optional].
        founded_under: The founded_under of this ProjectRead [Optional].
        total_cost_euro: The total_cost_euro of this ProjectRead [Optional].
        eu_contribution_euro: The eu_contribution_euro of this ProjectRead [Optional].
        coordinated_by: The coordinated_by of this ProjectRead [Optional].
        project_description_title: The project_description_title of this ProjectRead [Optional].
        project_description_text: The project_description_text of this ProjectRead [Optional].
        programmes_url: The programmes_url of this ProjectRead [Optional].
        topic_url: The topic_url of this ProjectRead [Optional].
        call_for_proposal: The call_for_proposal of this ProjectRead [Optional].
        founding_scheme: The founding_scheme of this ProjectRead [Optional].
        image: The image of this ProjectRead [Optional].
        url: The url of this ProjectRead [Optional].
        keywords: The keywords of this ProjectRead.
        identifier: The identifier of this ProjectRead.
    """

    platform: Optional[str] = Field(alias="platform", default=None)
    platform_identifier: Optional[str] = Field(
        alias="platform_identifier", default=None
    )
    name: str = Field(alias="name")
    doi: Optional[str] = Field(alias="doi", default=None)
    start_date: Optional[datetime] = Field(alias="start_date", default=None)
    end_date: Optional[datetime] = Field(alias="end_date", default=None)
    founded_under: Optional[str] = Field(alias="founded_under", default=None)
    total_cost_euro: Optional[float] = Field(alias="total_cost_euro", default=None)
    eu_contribution_euro: Optional[float] = Field(
        alias="eu_contribution_euro", default=None
    )
    coordinated_by: Optional[str] = Field(alias="coordinated_by", default=None)
    project_description_title: Optional[str] = Field(
        alias="project_description_title", default=None
    )
    project_description_text: Optional[str] = Field(
        alias="project_description_text", default=None
    )
    programmes_url: Optional[str] = Field(alias="programmes_url", default=None)
    topic_url: Optional[str] = Field(alias="topic_url", default=None)
    call_for_proposal: Optional[str] = Field(alias="call_for_proposal", default=None)
    founding_scheme: Optional[str] = Field(alias="founding_scheme", default=None)
    image: Optional[str] = Field(alias="image", default=None)
    url: Optional[str] = Field(alias="url", default=None)
    keywords: List[str] = Field(alias="keywords")
    identifier: int = Field(alias="identifier")

    @validator("name")
    def name_max_length(cls, value):
        assert len(value) <= 250
        return value

    @validator("doi")
    def doi_max_length(cls, value):
        assert len(value) <= 150
        return value

    @validator("founded_under")
    def founded_under_max_length(cls, value):
        assert len(value) <= 250
        return value

    @validator("coordinated_by")
    def coordinated_by_max_length(cls, value):
        assert len(value) <= 250
        return value

    @validator("project_description_title")
    def project_description_title_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("project_description_text")
    def project_description_text_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("programmes_url")
    def programmes_url_max_length(cls, value):
        assert len(value) <= 250
        return value

    @validator("topic_url")
    def topic_url_max_length(cls, value):
        assert len(value) <= 250
        return value

    @validator("call_for_proposal")
    def call_for_proposal_max_length(cls, value):
        assert len(value) <= 250
        return value

    @validator("founding_scheme")
    def founding_scheme_max_length(cls, value):
        assert len(value) <= 250
        return value

    @validator("image")
    def image_max_length(cls, value):
        assert len(value) <= 250
        return value

    @validator("url")
    def url_max_length(cls, value):
        assert len(value) <= 250
        return value


ProjectRead.update_forward_refs()
