# coding: utf-8

from __future__ import annotations

import re  # noqa: F401
from datetime import date, datetime  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401


class EventRead(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    EventRead - a model defined in OpenAPI

        platform: The platform of this EventRead [Optional].
        platform_identifier: The platform_identifier of this EventRead [Optional].
        name: The name of this EventRead.
        description: The description of this EventRead.
        registration_url: The registration_url of this EventRead.
        location: The location of this EventRead.
        start_date: The start_date of this EventRead [Optional].
        end_date: The end_date of this EventRead [Optional].
        duration: The duration of this EventRead [Optional].
        status: The status of this EventRead [Optional].
        attendance_mode: The attendance_mode of this EventRead [Optional].
        type: The type of this EventRead [Optional].
        business_categories: The business_categories of this EventRead.
        sub_events: The sub_events of this EventRead.
        super_events: The super_events of this EventRead.
        research_areas: The research_areas of this EventRead.
        application_areas: The application_areas of this EventRead.
        relevant_resources: The relevant_resources of this EventRead.
        used_resources: The used_resources of this EventRead.
        identifier: The identifier of this EventRead.
    """

    platform: Optional[str] = Field(alias="platform", default=None)
    platform_identifier: Optional[str] = Field(
        alias="platform_identifier", default=None
    )
    name: str = Field(alias="name")
    description: str = Field(alias="description")
    registration_url: str = Field(alias="registration_url")
    location: str = Field(alias="location")
    start_date: Optional[datetime] = Field(alias="start_date", default=None)
    end_date: Optional[datetime] = Field(alias="end_date", default=None)
    duration: Optional[str] = Field(alias="duration", default=None)
    status: Optional[str] = Field(alias="status", default=None)
    attendance_mode: Optional[str] = Field(alias="attendance_mode", default=None)
    type: Optional[str] = Field(alias="type", default=None)
    business_categories: List[str] = Field(alias="business_categories")
    sub_events: List[int] = Field(alias="sub_events")
    super_events: List[int] = Field(alias="super_events")
    research_areas: List[str] = Field(alias="research_areas")
    application_areas: List[str] = Field(alias="application_areas")
    relevant_resources: List[int] = Field(alias="relevant_resources")
    used_resources: List[int] = Field(alias="used_resources")
    identifier: int = Field(alias="identifier")

    @validator("name")
    def name_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("description")
    def description_max_length(cls, value):
        assert len(value) <= 5000
        return value

    @validator("registration_url")
    def registration_url_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("location")
    def location_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("duration")
    def duration_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("status")
    def status_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("attendance_mode")
    def attendance_mode_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("type")
    def type_max_length(cls, value):
        assert len(value) <= 500
        return value


EventRead.update_forward_refs()
