# coding: utf-8

from __future__ import annotations

import re  # noqa: F401
from datetime import date, datetime  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401

from app.schemas.aiod_generated.data_download import DataDownload
from app.schemas.aiod_generated.measured_value import MeasuredValue


class DatasetCreate(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    DatasetCreate - a model defined in OpenAPI

        platform: The platform of this DatasetCreate [Optional].
        platform_identifier: The platform_identifier of this DatasetCreate [Optional].
        description: The description of this DatasetCreate.
        name: The name of this DatasetCreate.
        same_as: The same_as of this DatasetCreate.
        contact: The contact of this DatasetCreate [Optional].
        creator: The creator of this DatasetCreate [Optional].
        publisher: The publisher of this DatasetCreate [Optional].
        date_modified: The date_modified of this DatasetCreate [Optional].
        date_published: The date_published of this DatasetCreate [Optional].
        funder: The funder of this DatasetCreate [Optional].
        is_accessible_for_free: The is_accessible_for_free of this DatasetCreate [Optional].
        issn: The issn of this DatasetCreate [Optional].
        size: The size of this DatasetCreate [Optional].
        spatial_coverage: The spatial_coverage of this DatasetCreate [Optional].
        temporal_coverage_from: The temporal_coverage_from of this DatasetCreate [Optional].
        temporal_coverage_to: The temporal_coverage_to of this DatasetCreate [Optional].
        version: The version of this DatasetCreate [Optional].
        alternate_names: The alternate_names of this DatasetCreate.
        citations: The citations of this DatasetCreate.
        distributions: The distributions of this DatasetCreate.
        is_part: The is_part of this DatasetCreate.
        has_parts: The has_parts of this DatasetCreate.
        license: The license of this DatasetCreate [Optional].
        keywords: The keywords of this DatasetCreate.
        measured_values: The measured_values of this DatasetCreate.
    """

    platform: Optional[str] = Field(alias="platform", default=None)
    platform_identifier: Optional[str] = Field(
        alias="platform_identifier", default=None
    )
    description: str = Field(alias="description")
    name: str = Field(alias="name")
    same_as: str = Field(alias="same_as")
    contact: Optional[str] = Field(alias="contact", default=None)
    creator: Optional[str] = Field(alias="creator", default=None)
    publisher: Optional[str] = Field(alias="publisher", default=None)
    date_modified: Optional[datetime] = Field(alias="date_modified", default=None)
    date_published: Optional[datetime] = Field(alias="date_published", default=None)
    funder: Optional[str] = Field(alias="funder", default=None)
    is_accessible_for_free: Optional[bool] = Field(
        alias="is_accessible_for_free", default=None
    )
    issn: Optional[str] = Field(alias="issn", default=None)
    size: Optional[int] = Field(alias="size", default=None)
    spatial_coverage: Optional[str] = Field(alias="spatial_coverage", default=None)
    temporal_coverage_from: Optional[datetime] = Field(
        alias="temporal_coverage_from", default=None
    )
    temporal_coverage_to: Optional[datetime] = Field(
        alias="temporal_coverage_to", default=None
    )
    version: Optional[str] = Field(alias="version", default=None)
    alternate_names: List[str] = Field(alias="alternate_names")
    citations: List[int] = Field(alias="citations")
    distributions: List[DataDownload] = Field(alias="distributions")
    is_part: List[int] = Field(alias="is_part")
    has_parts: List[int] = Field(alias="has_parts")
    license: Optional[str] = Field(alias="license", default=None)
    keywords: List[str] = Field(alias="keywords")
    measured_values: List[MeasuredValue] = Field(alias="measured_values")

    @validator("description")
    def description_max_length(cls, value):
        assert len(value) <= 5000
        return value

    @validator("name")
    def name_max_length(cls, value):
        assert len(value) <= 150
        return value

    @validator("same_as")
    def same_as_max_length(cls, value):
        assert len(value) <= 150
        return value

    @validator("contact")
    def contact_max_length(cls, value):
        assert len(value) <= 150
        return value

    @validator("creator")
    def creator_max_length(cls, value):
        assert len(value) <= 150
        return value

    @validator("publisher")
    def publisher_max_length(cls, value):
        assert len(value) <= 150
        return value

    @validator("funder")
    def funder_max_length(cls, value):
        assert len(value) <= 150
        return value

    @validator("issn")
    def issn_max_length(cls, value):
        assert len(value) <= 8
        return value

    @validator("spatial_coverage")
    def spatial_coverage_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("version")
    def version_max_length(cls, value):
        assert len(value) <= 150
        return value


DatasetCreate.update_forward_refs()
