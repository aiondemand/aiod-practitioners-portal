# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401


class NewsCreate(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    NewsCreate - a model defined in OpenAPI

        platform: The platform of this NewsCreate [Optional].
        platform_identifier: The platform_identifier of this NewsCreate [Optional].
        title: The title of this NewsCreate.
        date_modified: The date_modified of this NewsCreate [Optional].
        body: The body of this NewsCreate.
        section: The section of this NewsCreate.
        headline: The headline of this NewsCreate.
        word_count: The word_count of this NewsCreate.
        source: The source of this NewsCreate [Optional].
        alternative_headline: The alternative_headline of this NewsCreate [Optional].
        news_categories: The news_categories of this NewsCreate.
        media: The media of this NewsCreate.
        keywords: The keywords of this NewsCreate.
        business_categories: The business_categories of this NewsCreate.
    """

    platform: Optional[str] = Field(alias="platform", default=None)
    platform_identifier: Optional[str] = Field(alias="platform_identifier", default=None)
    title: str = Field(alias="title")
    date_modified: Optional[datetime] = Field(alias="date_modified", default=None)
    body: str = Field(alias="body")
    section: str = Field(alias="section")
    headline: str = Field(alias="headline")
    word_count: int = Field(alias="word_count")
    source: Optional[str] = Field(alias="source", default=None)
    alternative_headline: Optional[str] = Field(alias="alternative_headline", default=None)
    news_categories: List[str] = Field(alias="news_categories")
    media: List[str] = Field(alias="media")
    keywords: List[str] = Field(alias="keywords")
    business_categories: List[str] = Field(alias="business_categories")

    @validator("title")
    def title_max_length(cls, value):
        assert len(value) <= 150
        return value

    @validator("body")
    def body_max_length(cls, value):
        assert len(value) <= 2000
        return value

    @validator("section")
    def section_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("headline")
    def headline_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("source")
    def source_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("alternative_headline")
    def alternative_headline_max_length(cls, value):
        assert len(value) <= 500
        return value

NewsCreate.update_forward_refs()
