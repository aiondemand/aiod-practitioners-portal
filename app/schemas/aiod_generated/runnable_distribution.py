# coding: utf-8

from __future__ import annotations

import re  # noqa: F401
from datetime import date, datetime  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401


class RunnableDistribution(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    RunnableDistribution - a model defined in OpenAPI

        platform: The platform of this RunnableDistribution [Optional].
        platform_identifier: The platform_identifier of this RunnableDistribution [Optional].
        checksum: The checksum of this RunnableDistribution [Optional].
        checksum_algorithm: The checksum_algorithm of this RunnableDistribution [Optional].
        copyright: The copyright of this RunnableDistribution [Optional].
        content_url: The content_url of this RunnableDistribution.
        content_size_kb: The content_size_kb of this RunnableDistribution [Optional].
        date_published: The date_published of this RunnableDistribution [Optional].
        description: The description of this RunnableDistribution [Optional].
        encoding_format: The encoding_format of this RunnableDistribution [Optional].
        name: The name of this RunnableDistribution [Optional].
        technology_readiness_level: The technology_readiness_level of this RunnableDistribution [Optional].
        installation_script: The installation_script of this RunnableDistribution [Optional].
        installation: The installation of this RunnableDistribution [Optional].
        installation_time_milliseconds: The installation_time_milliseconds of this RunnableDistribution [Optional].
        deployment_script: The deployment_script of this RunnableDistribution [Optional].
        deployment: The deployment of this RunnableDistribution [Optional].
        deployment_time_milliseconds: The deployment_time_milliseconds of this RunnableDistribution [Optional].
        os_requirement: The os_requirement of this RunnableDistribution [Optional].
        dependency: The dependency of this RunnableDistribution [Optional].
        hardware_requirement: The hardware_requirement of this RunnableDistribution [Optional].
    """

    platform: Optional[str] = Field(alias="platform", default=None)
    platform_identifier: Optional[str] = Field(
        alias="platform_identifier", default=None
    )
    checksum: Optional[str] = Field(alias="checksum", default=None)
    checksum_algorithm: Optional[str] = Field(alias="checksum_algorithm", default=None)
    copyright: Optional[str] = Field(alias="copyright", default=None)
    content_url: str = Field(alias="content_url")
    content_size_kb: Optional[int] = Field(alias="content_size_kb", default=None)
    date_published: Optional[datetime] = Field(alias="date_published", default=None)
    description: Optional[str] = Field(alias="description", default=None)
    encoding_format: Optional[str] = Field(alias="encoding_format", default=None)
    name: Optional[str] = Field(alias="name", default=None)
    technology_readiness_level: Optional[int] = Field(
        alias="technology_readiness_level", default=None
    )
    installation_script: Optional[str] = Field(
        alias="installation_script", default=None
    )
    installation: Optional[str] = Field(alias="installation", default=None)
    installation_time_milliseconds: Optional[int] = Field(
        alias="installation_time_milliseconds", default=None
    )
    deployment_script: Optional[str] = Field(alias="deployment_script", default=None)
    deployment: Optional[str] = Field(alias="deployment", default=None)
    deployment_time_milliseconds: Optional[int] = Field(
        alias="deployment_time_milliseconds", default=None
    )
    os_requirement: Optional[str] = Field(alias="os_requirement", default=None)
    dependency: Optional[str] = Field(alias="dependency", default=None)
    hardware_requirement: Optional[str] = Field(
        alias="hardware_requirement", default=None
    )

    @validator("platform")
    def platform_max_length(cls, value):
        assert len(value) <= 64
        return value

    @validator("platform_identifier")
    def platform_identifier_max_length(cls, value):
        assert len(value) <= 256
        return value

    @validator("checksum")
    def checksum_max_length(cls, value):
        assert len(value) <= 1800
        return value

    @validator("checksum_algorithm")
    def checksum_algorithm_max_length(cls, value):
        assert len(value) <= 64
        return value

    @validator("copyright")
    def copyright_max_length(cls, value):
        assert len(value) <= 256
        return value

    @validator("content_url")
    def content_url_max_length(cls, value):
        assert len(value) <= 256
        return value

    @validator("description")
    def description_max_length(cls, value):
        assert len(value) <= 1800
        return value

    @validator("encoding_format")
    def encoding_format_max_length(cls, value):
        assert len(value) <= 256
        return value

    @validator("name")
    def name_max_length(cls, value):
        assert len(value) <= 256
        return value

    @validator("installation_script")
    def installation_script_max_length(cls, value):
        assert len(value) <= 256
        return value

    @validator("installation")
    def installation_max_length(cls, value):
        assert len(value) <= 1800
        return value

    @validator("deployment_script")
    def deployment_script_max_length(cls, value):
        assert len(value) <= 256
        return value

    @validator("deployment")
    def deployment_max_length(cls, value):
        assert len(value) <= 1800
        return value

    @validator("os_requirement")
    def os_requirement_max_length(cls, value):
        assert len(value) <= 256
        return value

    @validator("dependency")
    def dependency_max_length(cls, value):
        assert len(value) <= 256
        return value

    @validator("hardware_requirement")
    def hardware_requirement_max_length(cls, value):
        assert len(value) <= 256
        return value


RunnableDistribution.update_forward_refs()
