# coding: utf-8

from __future__ import annotations

import re  # noqa: F401
from datetime import date, datetime  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401


class PresentationCreate(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    PresentationCreate - a model defined in OpenAPI

        platform: The platform of this PresentationCreate [Optional].
        platform_identifier: The platform_identifier of this PresentationCreate [Optional].
        name: The name of this PresentationCreate.
        description: The description of this PresentationCreate.
        url: The url of this PresentationCreate [Optional].
        date_published: The date_published of this PresentationCreate [Optional].
        publisher: The publisher of this PresentationCreate [Optional].
        author: The author of this PresentationCreate [Optional].
        image: The image of this PresentationCreate [Optional].
        is_accessible_for_free: The is_accessible_for_free of this PresentationCreate [Optional].
    """

    platform: Optional[str] = Field(alias="platform", default=None)
    platform_identifier: Optional[str] = Field(
        alias="platform_identifier", default=None
    )
    name: str = Field(alias="name")
    description: str = Field(alias="description")
    url: Optional[str] = Field(alias="url", default=None)
    date_published: Optional[datetime] = Field(alias="datePublished", default=None)
    publisher: Optional[str] = Field(alias="publisher", default=None)
    author: Optional[str] = Field(alias="author", default=None)
    image: Optional[str] = Field(alias="image", default=None)
    is_accessible_for_free: Optional[bool] = Field(
        alias="is_accessible_for_free", default=None
    )

    @validator("name")
    def name_max_length(cls, value):
        assert len(value) <= 150
        return value

    @validator("description")
    def description_max_length(cls, value):
        assert len(value) <= 5000
        return value

    @validator("url")
    def url_max_length(cls, value):
        assert len(value) <= 250
        return value

    @validator("publisher")
    def publisher_max_length(cls, value):
        assert len(value) <= 150
        return value

    @validator("author")
    def author_max_length(cls, value):
        assert len(value) <= 250
        return value

    @validator("image")
    def image_max_length(cls, value):
        assert len(value) <= 250
        return value


PresentationCreate.update_forward_refs()
