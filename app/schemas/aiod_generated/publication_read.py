# coding: utf-8

from __future__ import annotations
from datetime import date, datetime  # noqa: F401

import re  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401


class PublicationRead(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    PublicationRead - a model defined in OpenAPI

        platform: The platform of this PublicationRead [Optional].
        platform_identifier: The platform_identifier of this PublicationRead [Optional].
        title: The title of this PublicationRead.
        doi: The doi of this PublicationRead [Optional].
        creators: The creators of this PublicationRead [Optional].
        access_right: The access_right of this PublicationRead [Optional].
        date_created: The date_created of this PublicationRead [Optional].
        date_published: The date_published of this PublicationRead [Optional].
        url: The url of this PublicationRead [Optional].
        datasets: The datasets of this PublicationRead.
        license: The license of this PublicationRead [Optional].
        resource_type: The resource_type of this PublicationRead [Optional].
        identifier: The identifier of this PublicationRead.
    """

    platform: Optional[str] = Field(alias="platform", default=None)
    platform_identifier: Optional[str] = Field(alias="platform_identifier", default=None)
    title: str = Field(alias="title")
    doi: Optional[str] = Field(alias="doi", default=None)
    creators: Optional[str] = Field(alias="creators", default=None)
    access_right: Optional[str] = Field(alias="access_right", default=None)
    date_created: Optional[datetime] = Field(alias="date_created", default=None)
    date_published: Optional[datetime] = Field(alias="date_published", default=None)
    url: Optional[str] = Field(alias="url", default=None)
    datasets: List[int] = Field(alias="datasets")
    license: Optional[str] = Field(alias="license", default=None)
    resource_type: Optional[str] = Field(alias="resource_type", default=None)
    identifier: int = Field(alias="identifier")

    @validator("title")
    def title_max_length(cls, value):
        assert len(value) <= 250
        return value

    @validator("doi")
    def doi_max_length(cls, value):
        assert len(value) <= 150
        return value

    @validator("creators")
    def creators_max_length(cls, value):
        assert len(value) <= 450
        return value

    @validator("access_right")
    def access_right_max_length(cls, value):
        assert len(value) <= 150
        return value

    @validator("url")
    def url_max_length(cls, value):
        assert len(value) <= 250
        return value

PublicationRead.update_forward_refs()
