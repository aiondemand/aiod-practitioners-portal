# coding: utf-8

from __future__ import annotations

import re  # noqa: F401
from datetime import date, datetime  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401


class CaseStudyRead(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    CaseStudyRead - a model defined in OpenAPI

        platform: The platform of this CaseStudyRead [Optional].
        platform_identifier: The platform_identifier of this CaseStudyRead [Optional].
        description: The description of this CaseStudyRead.
        name: The name of this CaseStudyRead.
        creator: The creator of this CaseStudyRead [Optional].
        publisher: The publisher of this CaseStudyRead [Optional].
        date_modified: The date_modified of this CaseStudyRead [Optional].
        date_published: The date_published of this CaseStudyRead [Optional].
        same_as: The same_as of this CaseStudyRead [Optional].
        url: The url of this CaseStudyRead [Optional].
        is_accessible_for_free: The is_accessible_for_free of this CaseStudyRead [Optional].
        alternate_names: The alternate_names of this CaseStudyRead.
        keywords: The keywords of this CaseStudyRead.
        business_categories: The business_categories of this CaseStudyRead.
        technical_categories: The technical_categories of this CaseStudyRead.
        identifier: The identifier of this CaseStudyRead.
    """

    platform: Optional[str] = Field(alias="platform", default=None)
    platform_identifier: Optional[str] = Field(
        alias="platform_identifier", default=None
    )
    description: str = Field(alias="description")
    name: str = Field(alias="name")
    creator: Optional[str] = Field(alias="creator", default=None)
    publisher: Optional[str] = Field(alias="publisher", default=None)
    date_modified: Optional[datetime] = Field(alias="date_modified", default=None)
    date_published: Optional[datetime] = Field(alias="date_published", default=None)
    same_as: Optional[str] = Field(alias="same_as", default=None)
    url: Optional[str] = Field(alias="url", default=None)
    is_accessible_for_free: Optional[bool] = Field(
        alias="is_accessible_for_free", default=None
    )
    alternate_names: List[str] = Field(alias="alternate_names")
    keywords: List[str] = Field(alias="keywords")
    business_categories: List[str] = Field(alias="business_categories")
    technical_categories: List[str] = Field(alias="technical_categories")
    identifier: int = Field(alias="identifier")

    @validator("description")
    def description_max_length(cls, value):
        assert len(value) <= 5000
        return value

    @validator("name")
    def name_max_length(cls, value):
        assert len(value) <= 150
        return value

    @validator("creator")
    def creator_max_length(cls, value):
        assert len(value) <= 150
        return value

    @validator("publisher")
    def publisher_max_length(cls, value):
        assert len(value) <= 150
        return value

    @validator("same_as")
    def same_as_max_length(cls, value):
        assert len(value) <= 150
        return value

    @validator("url")
    def url_max_length(cls, value):
        assert len(value) <= 150
        return value


CaseStudyRead.update_forward_refs()
