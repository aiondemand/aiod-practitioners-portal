# coding: utf-8

from __future__ import annotations

import re  # noqa: F401
from datetime import date, datetime  # noqa: F401
from typing import Any, Dict, List, Optional  # noqa: F401

from pydantic import AnyUrl, BaseModel, EmailStr, Field, validator  # noqa: F401


class EducationalResourceCreate(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    EducationalResourceCreate - a model defined in OpenAPI

        platform: The platform of this EducationalResourceCreate [Optional].
        platform_identifier: The platform_identifier of this EducationalResourceCreate [Optional].
        title: The title of this EducationalResourceCreate.
        date_modified: The date_modified of this EducationalResourceCreate [Optional].
        body: The body of this EducationalResourceCreate.
        website_url: The website_url of this EducationalResourceCreate.
        educational_level: The educational_level of this EducationalResourceCreate.
        educational_type: The educational_type of this EducationalResourceCreate.
        pace: The pace of this EducationalResourceCreate.
        interactivity_type: The interactivity_type of this EducationalResourceCreate [Optional].
        typical_age_range: The typical_age_range of this EducationalResourceCreate [Optional].
        accessibility_api: The accessibility_api of this EducationalResourceCreate [Optional].
        accessibility_control: The accessibility_control of this EducationalResourceCreate [Optional].
        access_mode: The access_mode of this EducationalResourceCreate [Optional].
        access_mode_sufficient: The access_mode_sufficient of this EducationalResourceCreate [Optional].
        access_restrictions: The access_restrictions of this EducationalResourceCreate [Optional].
        citations: The citations of this EducationalResourceCreate [Optional].
        version: The version of this EducationalResourceCreate [Optional].
        number_of_weeks: The number_of_weeks of this EducationalResourceCreate [Optional].
        field_prerequisites: The field_prerequisites of this EducationalResourceCreate [Optional].
        short_summary: The short_summary of this EducationalResourceCreate [Optional].
        duration_minutes_and_hours: The duration_minutes_and_hours of this EducationalResourceCreate [Optional].
        hours_per_week: The hours_per_week of this EducationalResourceCreate [Optional].
        country: The country of this EducationalResourceCreate [Optional].
        is_accessible_for_free: The is_accessible_for_free of this EducationalResourceCreate [Optional].
        credits: The credits of this EducationalResourceCreate [Optional].
        duration_in_years: The duration_in_years of this EducationalResourceCreate [Optional].
        languages: The languages of this EducationalResourceCreate.
        target_audience: The target_audience of this EducationalResourceCreate.
        keywords: The keywords of this EducationalResourceCreate.
        business_categories: The business_categories of this EducationalResourceCreate.
        technical_categories: The technical_categories of this EducationalResourceCreate.
    """

    platform: Optional[str] = Field(alias="platform", default=None)
    platform_identifier: Optional[str] = Field(
        alias="platform_identifier", default=None
    )
    title: str = Field(alias="title")
    date_modified: Optional[datetime] = Field(alias="date_modified", default=None)
    body: str = Field(alias="body")
    website_url: str = Field(alias="website_url")
    educational_level: str = Field(alias="educational_level")
    educational_type: str = Field(alias="educational_type")
    pace: str = Field(alias="pace")
    interactivity_type: Optional[str] = Field(alias="interactivity_type", default=None)
    typical_age_range: Optional[str] = Field(alias="typical_age_range", default=None)
    accessibility_api: Optional[str] = Field(alias="accessibility_api", default=None)
    accessibility_control: Optional[str] = Field(
        alias="accessibility_control", default=None
    )
    access_mode: Optional[str] = Field(alias="access_mode", default=None)
    access_mode_sufficient: Optional[str] = Field(
        alias="access_mode_sufficient", default=None
    )
    access_restrictions: Optional[str] = Field(
        alias="access_restrictions", default=None
    )
    citations: Optional[str] = Field(alias="citations", default=None)
    version: Optional[str] = Field(alias="version", default=None)
    number_of_weeks: Optional[int] = Field(alias="number_of_weeks", default=None)
    field_prerequisites: Optional[str] = Field(
        alias="field_prerequisites", default=None
    )
    short_summary: Optional[str] = Field(alias="short_summary", default=None)
    duration_minutes_and_hours: Optional[str] = Field(
        alias="duration_minutes_and_hours", default=None
    )
    hours_per_week: Optional[str] = Field(alias="hours_per_week", default=None)
    country: Optional[str] = Field(alias="country", default=None)
    is_accessible_for_free: Optional[bool] = Field(
        alias="is_accessible_for_free", default=None
    )
    credits: Optional[bool] = Field(alias="credits", default=None)
    duration_in_years: Optional[int] = Field(alias="duration_in_years", default=None)
    languages: List[str] = Field(alias="languages")
    target_audience: List[str] = Field(alias="target_audience")
    keywords: List[str] = Field(alias="keywords")
    business_categories: List[str] = Field(alias="business_categories")
    technical_categories: List[str] = Field(alias="technical_categories")

    @validator("title")
    def title_max_length(cls, value):
        assert len(value) <= 150
        return value

    @validator("body")
    def body_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("website_url")
    def website_url_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("educational_level")
    def educational_level_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("educational_type")
    def educational_type_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("pace")
    def pace_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("interactivity_type")
    def interactivity_type_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("typical_age_range")
    def typical_age_range_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("accessibility_api")
    def accessibility_api_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("accessibility_control")
    def accessibility_control_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("access_mode")
    def access_mode_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("access_mode_sufficient")
    def access_mode_sufficient_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("access_restrictions")
    def access_restrictions_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("citations")
    def citations_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("version")
    def version_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("field_prerequisites")
    def field_prerequisites_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("short_summary")
    def short_summary_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("duration_minutes_and_hours")
    def duration_minutes_and_hours_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("hours_per_week")
    def hours_per_week_max_length(cls, value):
        assert len(value) <= 500
        return value

    @validator("country")
    def country_max_length(cls, value):
        assert len(value) <= 500
        return value


EducationalResourceCreate.update_forward_refs()
